# This is a document generation pipeline for Github
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - generate
  - publish

variables:
  CI_DEBUG_TRACE: "false"
  #GIT_STRATEGY: none
  ADOC_MASTERS: "src/en/architecture-book.adoc"


generate-version-pdf:       # This job runs in the build stage, which runs first.
  stage: generate
  image: artifactory.devops.telekom.de/hub.docker.com/asciidoctor/docker-asciidoctor:1.74
  script:
    - |
      # this patch is needed to fix inline data image/svg+xml for OTC icons
      apk add patch ghostscript
      # add support for optimized pdf
      gem install rghost
      patch -d $(dirname /usr/lib/ruby/gems/*/gems/prawn-svg-*/.) .devcontainer/prawn-svg.dataurl.patch
      # compute version and date
      export ARCHVERSION=${CI_COMMIT_TAG##nmc-arch-}
      export ARCHDATE=${CI_COMMIT_TIMESTAMP%%T*}
      # generate media
      mkdir -p generated/pdf
      for masterdoc in $ADOC_MASTERS
      do
          echo "Generate '$masterdoc' [$ARCHVERSION, $ARCHDATE]"
          asciidoctor-pdf -a compress -a optimize -a pdf-version=1.5 -a toc \
                      --destination-dir="generated/pdf" \
                      -a imagesdir=../../images \
                      -a pdf-fontsdir="themes/telefluid-pdf" \
                      -a pdf-themesdir="themes/telefluid-pdf" \
                      -a pdf-theme="telefluid-pdf" \
                      -a revdate=$ARCHDATE -a revnumber=", $ARCHVERSION" \
                      --trace --verbose $masterdoc
      done
      # preserve job id / artifact url for reuse in publish job
      echo ARCHVERSION=$ARCHVERSION >> generated-pdf.env
      echo ARCHDATE=$ARCHDATE >> generated-pdf.env
      echo GEN_JOB_URL=$CI_JOB_URL >> generated-pdf.env
      cat generated-pdf.env
  artifacts:
    paths:
      - generated/pdf/*.pdf
    expire_in: "never"
    reports:
      dotenv: generated-pdf.env
  rules:
    # if a tag is pushed, generate with version
    - if: '$CI_COMMIT_TAG =~ /^nmc-arch-.*$/'



generate-draft-pdf:       # This job runs in the build stage, which runs first.
  stage: generate
  image: artifactory.devops.telekom.de/hub.docker.com/asciidoctor/docker-asciidoctor:1.74
  script:
    - |
      # this patch is needed to fix inline data image/svg+xml for OTC icons
      apk add patch ghostscript
      # add support for optimized pdf
      gem install rghost
      patch -d $(dirname /usr/lib/ruby/gems/*/gems/prawn-svg-*/.) .devcontainer/prawn-svg.dataurl.patch
      # compute version and date
      export ARCHVERSION="DRAFT"
      export ARCHDATE=${CI_PIPELINE_CREATED_AT%%T*}
      # generate media
      mkdir -p generated/pdf
      for masterdoc in $ADOC_MASTERS
      do
          echo "Generate '$masterdoc' [$ARCHVERSION, $ARCHDATE]"
          asciidoctor-pdf -a compress -a optimize -a pdf-version=1.5 -a toc \
                      --destination-dir="generated/pdf" \
                      -a imagesdir=../../images \
                      -a pdf-fontsdir="themes/telefluid-pdf" \
                      -a pdf-themesdir="themes/telefluid-pdf" \
                      -a pdf-theme="telefluid-pdf" \
                      -a revdate=$ARCHDATE -a revnumber=", $ARCHVERSION" \
                      --trace --verbose $masterdoc
      done
  artifacts:
    paths:
      - generated/pdf/*.pdf
    expire_in: "1 day"
  rules:
    # if run manually, generate a draft; result only in pipeline
    - if: '$CI_PIPELINE_SOURCE == "web"'



publish-release:
  stage: publish
  # image: the default runner is used here
  script:
    - apk add curl
    - curl -sS --location --output /usr/local/bin/release-cli "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
    - release-cli -v
    - echo "Publish arch doc artifacts for $ARCHVERSION"
  needs:
    - job: generate-version-pdf
      artifacts: true
  release:
    name: '$ARCHVERSION:: Architecture documentation'
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG_MESSAGE'
    assets:
      links:
        - name: 'Partner integration howto (pdf)'
          filepath: '/docs/partner-howto.pdf'
          url: '$GEN_JOB_URL/artifacts/file/generated/pdf/partner-extract.pdf'
        - name: 'Complete architecture (pdf)'
          filepath: '/docs/architecture-book.pdf'
          url: '$GEN_JOB_URL/artifacts/file/generated/pdf/architecture-book.pdf'
        - name: 'System roles (pdf)'
          filepath: '/docs/systemroles.pdf'
          url: '$GEN_JOB_URL/artifacts/file/generated/pdf/systemroles-psa.pdf'
        - name: 'Data protection (pdf)'
          filepath: '/docs/dataprotection.pdf'
          url: '$GEN_JOB_URL/artifacts/file/generated/pdf/dataprotection-psa.pdf'
        - name: 'System overview (pdf)'
          filepath: '/docs/systemoverview.pdf'
          url: '$GEN_JOB_URL/artifacts/file/generated/pdf/systemoverview-psa.pdf'
  rules:
    - if: '$CI_COMMIT_TAG =~ /^nmc-arch-.*$/'
